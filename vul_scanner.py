import os
import subprocess
from jinja2 import Template


def delete_txt_files():
    try:
        current_directory = os.getcwd()
        
        txt_files = [f for f in os.listdir(current_directory) if f.endswith('.txt')]
        for txt_file in txt_files:
            os.remove(os.path.join(current_directory, txt_file))
            #print(f"Deleted: {txt_file}")
        
        if not txt_files:
            print("No .txt files found to delete.")
    except Exception as e:
        print(f"An error occurred: {e}")


def extract_open_ports(scan_results):
    open_ports_info = []
    for line in scan_results.splitlines():
        if "open" in line:
            parts = line.split()
            port = parts[0].split('/')[0]
            service = parts[2]
            open_ports_info.append(f"TCP Port {port}: {service}")
    return ', '.join(open_ports_info)

def scan(target):
    command = ['sudo', 'nmap', '-A', '-Pn', '-sS', '-sV', 'sC', '-T4', '-O', '--osscan-guess', '--reason', '-F', '-vvv', target]
    result = subprocess.run(command, capture_output=True, text=True)

    if result.returncode != 0:
        print(f"Error during Nmap scan: {result.stderr}")
        return None

    return result.stdout


def save_results_to_file(filename, content):
    try:
        with open(filename, 'w') as file:
            file.write(content)
        print(f"Results saved to {filename}")
    except IOError as e:
        print(f"Error saving results to file: {e}")


def scan_with_nmap(target_ip, output_file):
    # Define the Nmap command with the NSE script
    command = ['sudo', 'nmap', '--script', 'http-enum', '-Pn', target_ip]

    try:
        result = subprocess.run(command, capture_output=True, text=True)
        if result.returncode == 0:
            # Write the result to the specified output file
            with open(output_file, 'w') as file:
                file.write(result.stdout)
            print(f"Scan completed successfully. Results saved to {output_file}.")
        else:
            print(f"Error during Nmap scan: {result.stderr}")

    except Exception as e:
        print(f"An error occurred: {e}")

def run_nikto(target_ip, output_file):
    # Define the Nikto command
    command = ['sudo', 'nikto', '-h', target_ip, '-ssl', '-C', 'all', '-output', output_file]

    try:
        # Execute the Nikto command
        result = subprocess.run(command, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"Nikto scan completed successfully. Results saved to {output_file}.")
        else:
            print(f"Error during Nikto scan: {result.stderr}")
    except Exception as e:
        print(f"An error occurred: {e}")



def combine_text_files(output_filename):
    try:
        current_directory = os.getcwd()
        
        txt_files = [f for f in os.listdir(current_directory) if f.endswith('.txt')]
        
        if not txt_files:
            print("No .txt files found in the current directory.")
            return
        
        # Open the output file in write mode
        with open(output_filename, 'w') as outfile:
            # Iterate through each .txt file in the directory
            for txt_file in txt_files:
                txt_file_path = os.path.join(current_directory, txt_file)

                with open(txt_file_path, 'r') as infile:
                    outfile.write(infile.read())
                    outfile.write("\n\n") 
            
        print(f"All .txt files have been combined into {output_filename}")
    except Exception as e:
        print(f"An error occurred: {e}")

def scanner(target):
    delete_txt_files()
    scan_results = scan(target)
    if scan_results is None:
        return

    open_ports = extract_open_ports(scan_results)
    full_results_filename = "nmap_scan_results.txt"
    open_ports_filename = "open_ports.txt"


    output_file = f"{target}_http_enum_scan.txt"
    scan_with_nmap(target, output_file)

    run_nikto(target, "nikto_scan_results.txt")

    # Save the full scan results and the extracted open ports
    save_results_to_file(full_results_filename, scan_results)
    save_results_to_file(open_ports_filename, open_ports)

    output_file = "combined_output.txt" 
    combine_text_files(output_file)

  
if __name__ == "__main__":
    target_ip = input("Enter a target IP or range (e.g., 192.168.1.1 or 192.168.1.1-10 or 192.168.1.0/24): ")
    if target_ip:
        scanner(target_ip)
    else:
        print("Please enter a valid IP address or range.")
